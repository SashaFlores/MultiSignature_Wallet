{"version":3,"sources":["api/web3.ts","components/useAsync.tsx","contexts/Web3.tsx","api/multi-sig-wallet.ts","contexts/MultiSigWallet.tsx","App/DepositForm.tsx","App/CreateTxModal.tsx","App/TransactionActions.tsx","App/TransactionList.tsx","App/MultiSigWallet.tsx","App/Network.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["unlockAccount","a","window","ethereum","Error","web3","Web3","enable","eth","getAccounts","accounts","account","useAsync","req","useState","pending","error","data","state","setState","params","call","INITIAL_STATE","netId","UPDATE_ACCOUNT","UPDATE_NET_ID","reducer","action","type","Web3Context","createContext","updateAccount","_data","updateNetId","useWeb3Context","useContext","Provider","children","useReducer","dispatch","value","useMemo","Updater","useEffect","callback","id","setInterval","clearInterval","subscribeToAccount","console","undefined","location","reload","net","getId","subscribeToNetId","MultiSigWallet","TruffleContract","multiSigWalletTruffle","get","setProvider","currentProvider","deployed","multiSig","getBalance","address","balance","getOwners","owners","numConfirmationsRequired","getTransactionCount","transactionCount","count","toNumber","transactions","i","txIndex","getTransaction","tx","isConfirmed","push","to","executed","numConfirmations","isConfirmedByCurrentAccount","sendTransaction","from","submitTx","submitTransaction","confirmTx","confirmTransaction","revokeConfirmation","executeTx","executeTransaction","SET","UPDATE_BALANCE","ADD_TX","parseInt","utils","toBN","MultiSigWalletContext","set","updateBalance","addTx","useMultiSigWalletContext","getMultiSigWallet","res","Contract","abi","events","allEvents","log","unsubscribe","subscribe","event","returnValues","DepositForm","input","setInput","deposit","_e","alert","zero","gt","message","Form","onSubmit","Field","Input","placeholder","min","onChange","e","target","Button","color","disabled","loading","CreateTxModal","open","onClose","inputs","setInputs","name","toString","Modal","Header","Content","Message","Actions","onClick","TransactionActions","TransactionList","map","openModal","owner","getNetwork","Network","App","className","warning","onClickConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.740df406.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\n// https://github.com/MetaMask/faq/blob/master/DEVELOPERS.md\r\nexport async function unlockAccount() {\r\n  // @ts-ignore\r\n  const { ethereum } = window;\r\n\r\n  if (!ethereum) {\r\n    throw new Error(\"Web3 not found\");\r\n  }\r\n\r\n  const web3 = new Web3(ethereum);\r\n  await ethereum.enable();\r\n\r\n  const accounts = await web3.eth.getAccounts();\r\n\r\n  return { web3, account: accounts[0] || \"\" };\r\n}\r\n\r\nexport function subscribeToAccount(\r\n  web3: Web3,\r\n  callback: (error: Error | null, account: string | null) => any\r\n) {\r\n  const id = setInterval(async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      callback(null, accounts[0]);\r\n    } catch (error) {\r\n      callback(error, null);\r\n    }\r\n  }, 1000);\r\n\r\n  return () => {\r\n    clearInterval(id);\r\n  };\r\n}\r\n\r\nexport function subscribeToNetId(\r\n  web3: Web3,\r\n  callback: (error: Error | null, netId: number | null) => any\r\n) {\r\n  const id = setInterval(async () => {\r\n    try {\r\n      const netId = await web3.eth.net.getId();\r\n      callback(null, netId);\r\n    } catch (error) {\r\n      callback(error, null);\r\n    }\r\n  }, 1000);\r\n\r\n  return () => {\r\n    clearInterval(id);\r\n  };\r\n}\r\n","  \r\nimport { useState } from \"react\";\r\n\r\ninterface State<Response> {\r\n  pending: boolean;\r\n  error: Error | null;\r\n  data: Response | null;\r\n}\r\n\r\ninterface CallResponse<Response> {\r\n  data?: Response;\r\n  error?: Error;\r\n}\r\n\r\ninterface UseAsync<Params, Response> extends State<Response> {\r\n  call: (params: Params) => Promise<CallResponse<Response>>;\r\n}\r\n\r\nfunction useAsync<Params, Response>(\r\n  req: (params: Params) => Promise<Response>\r\n): UseAsync<Params, Response> {\r\n  const [state, setState] = useState<State<Response>>({\r\n    pending: false,\r\n    error: null,\r\n    data: null,\r\n  });\r\n\r\n  async function call(params: Params): Promise<CallResponse<Response>> {\r\n    setState((state) => ({\r\n      ...state,\r\n      pending: true,\r\n      data: null,\r\n      error: null,\r\n    }));\r\n\r\n    try {\r\n      const data = await req(params);\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        pending: false,\r\n        data,\r\n      }));\r\n\r\n      return { data };\r\n    } catch (error) {\r\n      setState((state) => ({\r\n        ...state,\r\n        pending: false,\r\n        error,\r\n      }));\r\n\r\n      return { error };\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    call,\r\n  };\r\n}\r\n\r\nexport default useAsync;","import React, {\r\n    createContext,\r\n    useContext,\r\n    useEffect,\r\n    useMemo,\r\n    useReducer,\r\n  } from \"react\";\r\n  import Web3 from \"web3\";\r\n  import { subscribeToAccount, subscribeToNetId } from \"../api/web3\";\r\n  \r\n  interface State {\r\n    account: string;\r\n    web3: Web3 | null;\r\n    netId: number;\r\n  }\r\n  \r\n  const INITIAL_STATE: State = {\r\n    account: \"\",\r\n    web3: null,\r\n    netId: 0,\r\n  };\r\n  \r\n  const UPDATE_ACCOUNT = \"UPDATE_ACCOUNT\";\r\n  const UPDATE_NET_ID = \"UPDATE_NET_ID\";\r\n  \r\n  interface UpdateAccount {\r\n    type: \"UPDATE_ACCOUNT\";\r\n    account: string;\r\n    web3?: Web3;\r\n  }\r\n  \r\n  interface UpdateNetId {\r\n    type: \"UPDATE_NET_ID\";\r\n    netId: number;\r\n  }\r\n  \r\n  type Action = UpdateAccount | UpdateNetId;\r\n  \r\n  function reducer(state: State = INITIAL_STATE, action: Action) {\r\n    switch (action.type) {\r\n      case UPDATE_ACCOUNT: {\r\n        const web3 = action.web3 || state.web3;\r\n        const { account } = action;\r\n  \r\n        return {\r\n          ...state,\r\n          web3,\r\n          account,\r\n        };\r\n      }\r\n      case UPDATE_NET_ID: {\r\n        const { netId } = action;\r\n  \r\n        return {\r\n          ...state,\r\n          netId,\r\n        };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  const Web3Context = createContext({\r\n    state: INITIAL_STATE,\r\n    updateAccount: (_data: { account: string; web3?: Web3 }) => {},\r\n    updateNetId: (_data: { netId: number }) => {},\r\n  });\r\n  \r\n  export function useWeb3Context() {\r\n    return useContext(Web3Context);\r\n  }\r\n  \r\n  interface ProviderProps {}\r\n  \r\n  export const Provider: React.FC<ProviderProps> = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n  \r\n    function updateAccount(data: { account: string; web3?: Web3 }) {\r\n      dispatch({\r\n        type: UPDATE_ACCOUNT,\r\n        ...data,\r\n      });\r\n    }\r\n  \r\n    function updateNetId(data: { netId: number }) {\r\n      dispatch({\r\n        type: UPDATE_NET_ID,\r\n        ...data,\r\n      });\r\n    }\r\n  \r\n    return (\r\n      <Web3Context.Provider\r\n        value={useMemo(\r\n          () => ({\r\n            state,\r\n            updateAccount,\r\n            updateNetId,\r\n          }),\r\n          [state]\r\n        )}\r\n      >\r\n        {children}\r\n      </Web3Context.Provider>\r\n    );\r\n  };\r\n  \r\n  export function Updater() {\r\n    const { state, updateNetId } = useWeb3Context();\r\n  \r\n    useEffect(() => {\r\n      if (state.web3) {\r\n        const unsubscribe = subscribeToAccount(state.web3, (error, account) => {\r\n          if (error) {\r\n            console.error(error);\r\n          }\r\n          if (account !== undefined && account !== state.account) {\r\n            window.location.reload();\r\n          }\r\n        });\r\n  \r\n        return unsubscribe;\r\n      }\r\n    }, [state.web3, state.account]);\r\n  \r\n    useEffect(() => {\r\n      if (state.web3) {\r\n        const unsubscribe = subscribeToNetId(state.web3, (error, netId) => {\r\n          if (error) {\r\n            console.error(error);\r\n          }\r\n          if (netId) {\r\n            if (state.netId === 0) {\r\n              updateNetId({ netId });\r\n            } else if (netId !== state.netId) {\r\n              window.location.reload();\r\n            }\r\n          }\r\n        });\r\n  \r\n        return unsubscribe;\r\n      }\r\n    }, [state.web3, state.netId, updateNetId]);\r\n  \r\n    return null;\r\n  }","import Web3 from \"web3\";\r\nimport BN from \"bn.js\";\r\nimport TruffleContract from \"@truffle/contract\";\r\nimport multiSigWalletTruffle from \"../build/contracts/MultiSigWallet.json\";\r\n\r\n// @ts-ignore\r\nconst MultiSigWallet = TruffleContract(multiSigWalletTruffle);\r\n\r\ninterface Transaction {\r\n  txIndex: number;\r\n  to: string;\r\n  value: BN;\r\n  data: string;\r\n  executed: boolean;\r\n  numConfirmations: number;\r\n  isConfirmedByCurrentAccount: boolean;\r\n}\r\n\r\ninterface GetResponse {\r\n  address: string;\r\n  balance: string;\r\n  owners: string[];\r\n  numConfirmationsRequired: number;\r\n  transactionCount: number;\r\n  transactions: Transaction[];\r\n}\r\n\r\nexport async function get(web3: Web3, account: string): Promise<GetResponse> {\r\n  MultiSigWallet.setProvider(web3.currentProvider);\r\n\r\n  const multiSig = await MultiSigWallet.deployed();\r\n\r\n  const balance = await web3.eth.getBalance(multiSig.address);\r\n  const owners = await multiSig.getOwners();\r\n  const numConfirmationsRequired = await multiSig.numConfirmationsRequired();\r\n  const transactionCount = await multiSig.getTransactionCount();\r\n\r\n  // get 10 most recent tx\r\n  const count = transactionCount.toNumber();\r\n  const transactions: Transaction[] = [];\r\n  for (let i = 1; i <= 10; i++) {\r\n    const txIndex = count - i;\r\n    if (txIndex < 0) {\r\n      break;\r\n    }\r\n\r\n    const tx = await multiSig.getTransaction(txIndex);\r\n    const isConfirmed = await multiSig.isConfirmed(txIndex, account);\r\n\r\n    transactions.push({\r\n      txIndex,\r\n      to: tx.to,\r\n      value: tx.value,\r\n      data: tx.data,\r\n      executed: tx.executed,\r\n      numConfirmations: tx.numConfirmations.toNumber(),\r\n      isConfirmedByCurrentAccount: isConfirmed,\r\n    });\r\n  }\r\n\r\n  return {\r\n    address: multiSig.address,\r\n    balance,\r\n    owners,\r\n    numConfirmationsRequired: numConfirmationsRequired.toNumber(),\r\n    transactionCount: count,\r\n    transactions,\r\n  };\r\n}\r\n\r\nexport async function deposit(\r\n  web3: Web3,\r\n  account: string,\r\n  params: {\r\n    value: BN;\r\n  }\r\n) {\r\n  MultiSigWallet.setProvider(web3.currentProvider);\r\n  const multiSig = await MultiSigWallet.deployed();\r\n\r\n  await multiSig.sendTransaction({ from: account, value: params.value });\r\n}\r\n\r\nexport async function submitTx(\r\n  web3: Web3,\r\n  account: string,\r\n  params: {\r\n    to: string;\r\n    value: string;\r\n    data: string;\r\n  }\r\n) {\r\n  const { to, value, data } = params;\r\n\r\n  MultiSigWallet.setProvider(web3.currentProvider);\r\n  const multiSig = await MultiSigWallet.deployed();\r\n\r\n  await multiSig.submitTransaction(to, value, data, {\r\n    from: account,\r\n  });\r\n}\r\n\r\nexport async function confirmTx(\r\n  web3: Web3,\r\n  account: string,\r\n  params: {\r\n    txIndex: number;\r\n  }\r\n) {\r\n  const { txIndex } = params;\r\n\r\n  MultiSigWallet.setProvider(web3.currentProvider);\r\n  const multiSig = await MultiSigWallet.deployed();\r\n\r\n  await multiSig.confirmTransaction(txIndex, {\r\n    from: account,\r\n  });\r\n}\r\n\r\nexport async function revokeConfirmation(\r\n  web3: Web3,\r\n  account: string,\r\n  params: {\r\n    txIndex: number;\r\n  }\r\n) {\r\n  const { txIndex } = params;\r\n\r\n  MultiSigWallet.setProvider(web3.currentProvider);\r\n  const multiSig = await MultiSigWallet.deployed();\r\n\r\n  await multiSig.revokeConfirmation(txIndex, {\r\n    from: account,\r\n  });\r\n}\r\n\r\nexport async function executeTx(\r\n  web3: Web3,\r\n  account: string,\r\n  params: {\r\n    txIndex: number;\r\n  }\r\n) {\r\n \r\n  const { txIndex } = params;\r\n\r\n  MultiSigWallet.setProvider(web3.currentProvider);\r\n  const multiSig = await MultiSigWallet.deployed();\r\n\r\n  await multiSig.executeTransaction(txIndex, {\r\n    from: account,\r\n  });\r\n}\r\n\r\nexport function subscribe(\r\n  web3: Web3,\r\n  address: string,\r\n  callback: (error: Error | null, log: Log | null) => void\r\n) {\r\n  const multiSig = new web3.eth.Contract(MultiSigWallet.abi, address);\r\n\r\n  const res = multiSig.events.allEvents((error: Error, log: Log) => {\r\n    if (error) {\r\n      callback(error, null);\r\n    } else if (log) {\r\n      callback(null, log);\r\n    }\r\n  });\r\n\r\n  return () => res.unsubscribe();\r\n}\r\n\r\ninterface Deposit {\r\n  event: \"Deposit\";\r\n  returnValues: {\r\n    sender: string;\r\n    amount: string;\r\n    balance: string;\r\n  };\r\n}\r\n\r\ninterface SubmitTransaction {\r\n  event: \"SubmitTransaction\";\r\n  returnValues: {\r\n    owner: string;\r\n    txIndex: string;\r\n    to: string;\r\n    value: string;\r\n    data: string;\r\n  };\r\n}\r\n\r\ninterface ConfirmTransaction {\r\n  event: \"ConfirmTransaction\";\r\n  returnValues: {\r\n    owner: string;\r\n    txIndex: string;\r\n  };\r\n}\r\n\r\ninterface RevokeConfirmation {\r\n  event: \"RevokeConfirmation\";\r\n  returnValues: {\r\n    owner: string;\r\n    txIndex: string;\r\n  };\r\n}\r\n\r\ninterface ExecuteTransaction {\r\n  event: \"ExecuteTransaction\";\r\n  returnValues: {\r\n    owner: string;\r\n    txIndex: string;\r\n  };\r\n}\r\n\r\ntype Log =\r\n  | Deposit\r\n  | SubmitTransaction\r\n  | ConfirmTransaction\r\n  | RevokeConfirmation\r\n  | ExecuteTransaction;","import Web3 from \"web3\";\r\nimport BN from \"bn.js\";\r\nimport React, {\r\n  useReducer,\r\n  useEffect,\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n} from \"react\";\r\nimport { useWeb3Context } from \"./Web3\";\r\nimport { get as getMultiSigWallet, subscribe } from \"../api/multi-sig-wallet\";\r\n\r\ninterface State {\r\n  address: string;\r\n  balance: string;\r\n  owners: string[];\r\n  numConfirmationsRequired: number;\r\n  transactionCount: number;\r\n  transactions: Transaction[];\r\n}\r\n\r\ninterface Transaction {\r\n  txIndex: number;\r\n  to: string;\r\n  value: BN;\r\n  data: string;\r\n  executed: boolean;\r\n  numConfirmations: number;\r\n  isConfirmedByCurrentAccount: boolean;\r\n}\r\n\r\nconst INITIAL_STATE: State = {\r\n  address: \"\",\r\n  balance: \"0\",\r\n  owners: [],\r\n  numConfirmationsRequired: 0,\r\n  transactionCount: 0,\r\n  transactions: [],\r\n};\r\n\r\nconst SET = \"SET\";\r\nconst UPDATE_BALANCE = \"UPDATE_BALANCE\";\r\nconst ADD_TX = \"ADD_TX\";\r\n\r\ninterface Set {\r\n  type: \"SET\";\r\n  data: {\r\n    address: string;\r\n    balance: string;\r\n    owners: string[];\r\n    numConfirmationsRequired: number;\r\n    transactionCount: number;\r\n    transactions: Transaction[];\r\n  };\r\n}\r\n\r\ninterface UpdateBalance {\r\n  type: \"UPDATE_BALANCE\";\r\n  data: {\r\n    balance: string;\r\n  };\r\n}\r\n\r\ninterface AddTx {\r\n  type: \"ADD_TX\";\r\n  data: {\r\n    txIndex: string;\r\n    to: string;\r\n    value: string;\r\n    data: string;\r\n  };\r\n}\r\n\r\ntype Action = Set | UpdateBalance | AddTx;\r\n\r\nfunction reducer(state: State = INITIAL_STATE, action: Action) {\r\n  switch (action.type) {\r\n    case SET: {\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      };\r\n    }\r\n    case UPDATE_BALANCE: {\r\n      return {\r\n        ...state,\r\n        balance: action.data.balance,\r\n      };\r\n    }\r\n    case ADD_TX: {\r\n      const {\r\n        data: { txIndex, to, value, data },\r\n      } = action;\r\n\r\n      const transactions = [\r\n        {\r\n          txIndex: parseInt(txIndex),\r\n          to,\r\n          value: Web3.utils.toBN(value),\r\n          data,\r\n          executed: false,\r\n          numConfirmations: 0,\r\n          isConfirmedByCurrentAccount: false,\r\n        },\r\n        ...state.transactions,\r\n      ];\r\n\r\n      return {\r\n        ...state,\r\n        transactionCount: state.transactionCount + 1,\r\n        transactions,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ninterface SetInputs {\r\n  address: string;\r\n  balance: string;\r\n  owners: string[];\r\n  numConfirmationsRequired: number;\r\n  transactionCount: number;\r\n  transactions: Transaction[];\r\n}\r\n\r\ninterface UpdateBalanceInputs {\r\n  balance: string;\r\n}\r\n\r\ninterface AddTxInputs {\r\n  txIndex: string;\r\n  to: string;\r\n  value: string;\r\n  data: string;\r\n}\r\n\r\nconst MultiSigWalletContext = createContext({\r\n  state: INITIAL_STATE,\r\n  set: (_data: SetInputs) => {},\r\n  updateBalance: (_data: UpdateBalanceInputs) => {},\r\n  addTx: (_data: AddTxInputs) => {},\r\n});\r\n\r\nexport function useMultiSigWalletContext() {\r\n  return useContext(MultiSigWalletContext);\r\n}\r\n\r\ninterface ProviderProps {}\r\n\r\nexport const Provider: React.FC<ProviderProps> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n\r\n  function set(data: SetInputs) {\r\n    dispatch({\r\n      type: SET,\r\n      data,\r\n    });\r\n  }\r\n\r\n  function updateBalance(data: UpdateBalanceInputs) {\r\n    dispatch({\r\n      type: UPDATE_BALANCE,\r\n      data,\r\n    });\r\n  }\r\n\r\n  function addTx(data: AddTxInputs) {\r\n    dispatch({\r\n      type: ADD_TX,\r\n      data,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <MultiSigWalletContext.Provider\r\n      value={useMemo(\r\n        () => ({\r\n          state,\r\n          set,\r\n          updateBalance,\r\n          addTx,\r\n        }),\r\n        [state]\r\n      )}\r\n    >\r\n      {children}\r\n    </MultiSigWalletContext.Provider>\r\n  );\r\n};\r\n\r\nexport function Updater() {\r\n  const {\r\n    state: { web3, account },\r\n  } = useWeb3Context();\r\n  const { state, set, updateBalance, addTx } = useMultiSigWalletContext();\r\n\r\n  useEffect(() => {\r\n    async function get(web3: Web3, account: string) {\r\n      try {\r\n        const data = await getMultiSigWallet(web3, account);\r\n        set(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    if (web3) {\r\n      get(web3, account);\r\n    }\r\n  }, [web3]);\r\n\r\n  useEffect(() => {\r\n    if (web3 && state.address) {\r\n      return subscribe(web3, state.address, (error, log) => {\r\n        if (error) {\r\n          console.error(error);\r\n        } else if (log) {\r\n          switch (log.event) {\r\n            case \"Deposit\":\r\n              updateBalance(log.returnValues);\r\n              break;\r\n            case \"SubmitTransaction\":\r\n              addTx(log.returnValues);\r\n              break;\r\n            default:\r\n              console.log(log);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [web3, state.address]);\r\n  return null;\r\n}","import React, { useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport BN from \"bn.js\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { useWeb3Context } from \"../contexts/Web3\";\r\nimport useAsync from \"../components/useAsync\";\r\nimport { deposit } from \"../api/multi-sig-wallet\";\r\n\r\ninterface Props {}\r\n\r\ninterface DepositParams {\r\n  web3: Web3;\r\n  account: string;\r\n  value: BN;\r\n}\r\n\r\nconst DepositForm: React.FC<Props> = () => {\r\n  const {\r\n    state: { web3, account },\r\n  } = useWeb3Context();\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const { pending, call } = useAsync<DepositParams, void>(\r\n    ({ web3, account, value }) => deposit(web3, account, { value })\r\n  );\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInput(e.target.value);\r\n  }\r\n\r\n  async function onSubmit(_e: React.FormEvent<HTMLFormElement>) {\r\n    if (pending) {\r\n      return;\r\n    }\r\n\r\n    if (!web3) {\r\n      alert(\"No web3\");\r\n      return;\r\n    }\r\n\r\n    const value = Web3.utils.toBN(input);\r\n    const zero = Web3.utils.toBN(0);\r\n\r\n    if (value.gt(zero)) {\r\n      const { error } = await call({\r\n        web3,\r\n        account,\r\n        value,\r\n      });\r\n\r\n      if (error) {\r\n        alert(`Error: ${error.message}`);\r\n      } else {\r\n        setInput(\"\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}>\r\n      <Form.Field>\r\n        <Form.Input\r\n          placeholder=\"Amount to deposit wei\"\r\n          type=\"number\"\r\n          min={0}\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n      </Form.Field>\r\n      <Button color=\"green\" disabled={pending} loading={pending}>\r\n        Deposit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default DepositForm;","import React, { useState } from \"react\";\r\nimport { Button, Modal, Form, Message } from \"semantic-ui-react\";\r\nimport useAsync from \"../components/useAsync\";\r\nimport { useWeb3Context } from \"../contexts/Web3\";\r\nimport { submitTx } from \"../api/multi-sig-wallet\";\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  onClose: (event?: any) => void;\r\n}\r\n\r\ninterface SubmitTxParams {\r\n  to: string;\r\n  value: string;\r\n  data: string;\r\n}\r\n\r\nconst CreateTxModal: React.FC<Props> = ({ open, onClose }) => {\r\n  const {\r\n    state: { web3, account },\r\n  } = useWeb3Context();\r\n\r\n  const { pending, error, call } = useAsync<SubmitTxParams, any>(\r\n    async (params) => {\r\n      if (!web3) {\r\n        throw new Error(\"No web3\");\r\n      }\r\n\r\n      await submitTx(web3, account, params);\r\n    }\r\n  );\r\n\r\n  const [inputs, setInputs] = useState({\r\n    to: \"\",\r\n    value: 0,\r\n    data: \"\",\r\n  });\r\n\r\n  function onChange(name: string, e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  async function onSubmit() {\r\n    if (pending) {\r\n      return;\r\n    }\r\n\r\n    const { error } = await call({\r\n      ...inputs,\r\n      value: inputs.value.toString(),\r\n    });\r\n\r\n    if (!error) {\r\n      onClose();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal open={open} onClose={onClose}>\r\n      <Modal.Header>Create Transaction</Modal.Header>\r\n      <Modal.Content>\r\n        {error && <Message error>{error.message}</Message>}\r\n        <Form onSubmit={onSubmit}>\r\n          <Form.Field>\r\n            <label>To</label>\r\n            <Form.Input\r\n              type=\"text\"\r\n              value={inputs.to}\r\n              onChange={(e) => onChange(\"to\", e)}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Value</label>\r\n            <Form.Input\r\n              type=\"number\"\r\n              min={0}\r\n              value={inputs.value}\r\n              onChange={(e) => onChange(\"value\", e)}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Data</label>\r\n            <Form.Input\r\n              value={inputs.data}\r\n              onChange={(e) => onChange(\"data\", e)}\r\n            />\r\n          </Form.Field>\r\n        </Form>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button onClick={onClose} disabled={pending}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          color=\"green\"\r\n          onClick={onSubmit}\r\n          disabled={pending}\r\n          loading={pending}\r\n        >\r\n          Create\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateTxModal;","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { useWeb3Context } from \"../contexts/Web3\";\r\nimport useAsync from \"../components/useAsync\";\r\nimport * as multiSig from \"../api/multi-sig-wallet\";\r\n\r\ninterface Props {\r\n  numConfirmationsRequired: number;\r\n  tx: {\r\n    txIndex: number;\r\n    executed: boolean;\r\n    numConfirmations: number;\r\n    isConfirmedByCurrentAccount: boolean;\r\n  };\r\n}\r\n\r\nconst TransactionActions: React.FC<Props> = ({\r\n  numConfirmationsRequired,\r\n  tx,\r\n}) => {\r\n  const {\r\n    state: { web3, account },\r\n  } = useWeb3Context();\r\n\r\n  const { txIndex } = tx;\r\n\r\n  const confirmTx = useAsync(async () => {\r\n    if (!web3) {\r\n      throw new Error(\"No web3\");\r\n    }\r\n\r\n    await multiSig.confirmTx(web3, account, { txIndex });\r\n  });\r\n\r\n  const revokeConfirmation = useAsync(async () => {\r\n    if (!web3) {\r\n      throw new Error(\"No web3\");\r\n    }\r\n\r\n    await multiSig.revokeConfirmation(web3, account, { txIndex });\r\n  });\r\n\r\n  const executeTx = useAsync(async () => {\r\n    if (!web3) {\r\n      throw new Error(\"No web3\");\r\n    }\r\n\r\n    await multiSig.executeTx(web3, account, { txIndex });\r\n  });\r\n\r\n  if (tx.executed) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      {tx.isConfirmedByCurrentAccount ? (\r\n        <Button\r\n          onClick={(_e) => revokeConfirmation.call(null)}\r\n          disabled={revokeConfirmation.pending}\r\n          loading={revokeConfirmation.pending}\r\n        >\r\n          Revoke Confirmation\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          onClick={(_e) => confirmTx.call(null)}\r\n          disabled={confirmTx.pending}\r\n          loading={confirmTx.pending}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      )}\r\n      {tx.numConfirmations >= numConfirmationsRequired && (\r\n        <Button\r\n          onClick={(_e) => executeTx.call(null)}\r\n          disabled={executeTx.pending}\r\n          loading={executeTx.pending}\r\n        >\r\n          Execute\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TransactionActions;","import React from \"react\";\r\nimport BN from \"bn.js\";\r\nimport TransactionActions from \"./TransactionActions\";\r\n\r\ninterface Transaction {\r\n  txIndex: number;\r\n  to: string;\r\n  value: BN;\r\n  data: string;\r\n  executed: boolean;\r\n  numConfirmations: number;\r\n  isConfirmedByCurrentAccount: boolean;\r\n}\r\n\r\ninterface Props {\r\n  numConfirmationsRequired: number;\r\n  count: number;\r\n  data: Transaction[];\r\n}\r\n\r\nconst TransactionList: React.FC<Props> = ({\r\n  numConfirmationsRequired,\r\n  count,\r\n  data\r\n}) => {\r\n  return (\r\n    <ul>\r\n      {data.map(tx => (\r\n        <li key={tx.txIndex}>\r\n          <div>Tx Index: {tx.txIndex}</div>\r\n          <div>To: {tx.to}</div>\r\n          <div>Value: {tx.value.toString()}</div>\r\n          <div>Data: {tx.data}</div>\r\n          <div>Executed: {tx.executed.toString()}</div>\r\n          <div>Confirmations: {tx.numConfirmations}</div>\r\n          <TransactionActions\r\n            numConfirmationsRequired={numConfirmationsRequired}\r\n            tx={tx}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TransactionList;","import React, { useState } from \"react\";\r\nimport { useMultiSigWalletContext } from \"../contexts/MultiSigWallet\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport DepositForm from \"./DepositForm\";\r\nimport CreateTxModal from \"./CreateTxModal\";\r\nimport TransactionList from \"./TransactionList\";\r\n\r\nfunction MultiSigWallet() {\r\n  const { state } = useMultiSigWalletContext();\r\n  const [open, openModal] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <div>Contract: {state.address}</div>\r\n      <h3>Balance: {state.balance} wei</h3>\r\n      <DepositForm />\r\n      <h3>Owners</h3>\r\n      <ul>\r\n        {state.owners.map((owner, i) => (\r\n          <li key={i}>{owner}</li>\r\n        ))}\r\n      </ul>\r\n      <div>Confirmations required: {state.numConfirmationsRequired}</div>\r\n      <h3>Transactions ({state.transactionCount})</h3>\r\n      <Button color=\"green\" onClick={() => openModal(true)}>\r\n        Create Transaction\r\n      </Button>\r\n      {open && <CreateTxModal open={open} onClose={() => openModal(false)} />}\r\n      <TransactionList\r\n        numConfirmationsRequired={state.numConfirmationsRequired}\r\n        data={state.transactions}\r\n        count={state.transactionCount}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiSigWallet;","import React from \"react\";\r\n\r\ninterface Props {\r\n  netId: number;\r\n}\r\n\r\nfunction getNetwork(netId: number) {\r\n  switch (netId) {\r\n    case 1:\r\n      return \"Mainnet\";\r\n    case 2:\r\n      return \"Morden test network\";\r\n    case 3:\r\n      return \"Ropsten network\";\r\n    case 4:\r\n      return \"Rinkeby test network\";\r\n    case 42:\r\n      return \"Kovan test network\";\r\n    default:\r\n      return \"Unkown network\";\r\n  }\r\n}\r\n\r\nconst Network: React.FC<Props> = ({ netId }) => {\r\n  return <div>{getNetwork(netId)}</div>;\r\n};\r\n\r\nexport default Network;","import React from \"react\";\nimport { Button, Message } from \"semantic-ui-react\";\nimport { unlockAccount } from \"../api/web3\";\nimport \"./index.css\";\nimport useAsync from \"../components/useAsync\";\nimport { useWeb3Context } from \"../contexts/Web3\";\nimport MultiSigWallet from \"./MultiSigWallet\";\nimport Network from \"./Network\";\n\nfunction App() {\n  const {\n    state: { account, netId },\n    updateAccount,\n  } = useWeb3Context();\n\n  const { pending, error, call } = useAsync(unlockAccount);\n\n  async function onClickConnect() {\n    const { error, data } = await call(null);\n\n    if (error) {\n      console.error(error);\n    }\n    if (data) {\n      updateAccount(data);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Multi Sig Wallet</h1>\n        {account ? (\n          <>\n            {netId !== 0 && <Network netId={netId} />}\n            <div>Account: {account}</div>\n            <MultiSigWallet />\n          </>\n        ) : (\n          <>\n            {error ? (\n              <Message error>{error.message}</Message>\n            ) : (\n              <Message warning>Metamask is not connected</Message>\n            )}\n            <Button\n              color=\"green\"\n              onClick={() => onClickConnect()}\n              disabled={pending}\n              loading={pending}\n            >\n              Connect to Metamask\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App/index\";\nimport {\n  Provider as Web3Provider,\n  Updater as Web3Updater,\n} from \"./contexts/Web3\";\nimport {\n  Provider as MultiSigWalletProvider,\n  Updater as MultiSigWalletUpdater,\n} from \"./contexts/MultiSigWallet\";\nimport \"./index.css\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider>\n      <MultiSigWalletProvider>\n        <App />\n        <Web3Updater />\n        <MultiSigWalletUpdater />\n      </MultiSigWalletProvider>\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}